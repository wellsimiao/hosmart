const chalk = require('chalk');
const packagejs = require('../../package.json');
const semver = require('semver');
const BaseGenerator = require('generator-jhipster/generators/generator-base');
const jhipsterConstants = require('generator-jhipster/generators/generator-constants');
const shelljs = require('shelljs');

module.exports = class extends BaseGenerator {
    get initializing() {
        return {
            init(args) {
                if (args === 'default') {
                    // do something when argument is 'default'
                }
            },
            readConfig() {
                this.jhipsterAppConfig = this.getJhipsterAppConfig();
                if (!this.jhipsterAppConfig) {
                    this.error('Can\'t read .yo-rc.json');
                }
            },
            displayLogo() {
                // it's here to show that you can use functions from generator-jhipster
                // this function is in: generator-jhipster/generators/generator-base.js
                this.printJHipsterLogo();

                // Have Yeoman greet the user.
                this.log(`\nWelcome to the ${chalk.bold.yellow('JHipster aeropost')} generator! ${chalk.yellow(`v${packagejs.version}\n`)}`);
            },
            checkJhipster() {
                const currentJhipsterVersion = this.jhipsterAppConfig.jhipsterVersion;
                const minimumJhipsterVersion = packagejs.dependencies['generator-jhipster'];
                if (!semver.satisfies(currentJhipsterVersion, minimumJhipsterVersion)) {
                    this.warning(`\nYour generated project used an old JHipster version (${currentJhipsterVersion})... you need at least (${minimumJhipsterVersion})\n`);
                }
            },
            getConfigAero(namespace = 'generator-jhipster-aeropost') {
                const fromPath = '.yo-rc-aeropost.json';
                if (shelljs.test('-f', fromPath)) {
                    const fileData = this.fs.readJSON(fromPath);
                    if (fileData && fileData[namespace]) {
                        this.jhipsterAeroAppConfig = fileData[namespace];
                    }
                }
            }
        };
    }

    prompting() {
        
        this.authenticationType = this.jhipsterAppConfig.authenticationType;
        this.hasOauth2 = this.authenticationType == "oauth2";
        this.hasConfigFile = this.jhipsterAeroAppConfig !== undefined;
        const prompts = [];

        if(!this.hasConfigFile){
            prompts.push({
                    type: 'input',
                    name: 'projectName',
                    message: 'Please put the projec Name',
                    default: ''
            });
            prompts.push({
                    type: 'input',
                    name: 'businessArea',
                    message: 'Please put the business area for this project',
                    default: 'backoffice'
            });
            prompts.push({
                    type: 'input',
                    name: 'gitBranch',
                    message: 'Please put Git repository for this project',
                    default: ''
            });
            prompts.push({
                    type: 'input',
                    name: 'gitCredentialsId',
                    message: 'Please put Git credencials',
                    default: ''
            });
            prompts.push({
                    type: 'input',
                    name: 'version',
                    message: 'Please put version app',
                    default: '0.0.1-SNAPSHOT'
            });
            prompts.push({
                    type: 'input',
                    name: 'registryUrl',
                    message: 'Please put registry url for DEV',
                    default: ''
            });
            prompts.push({
                    type: 'input',
                    name: 'dockerUrl',
                    message: 'Please put docker url for DEV',
                    default: ''
            });
            prompts.push({
                    type: 'input',
                    name: 'vsDocker',
                    message: 'Please put vs-docker url for DEV',
                    default: ''
            }); 
            prompts.push({
                    type: 'input',
                    name: 'graphiteUrl',
                    message: 'Please put graphite url',
                    default: ''
            }); 
            prompts.push({
                    type: 'input',
                    name: 'springCloudUrl',
                    message: 'Please put spring cloud url for DEV',
                    default: ''
            });
            /*prompts.push({
                    type: 'input',
                    name: 'jenkisJobs',
                    message: 'Would you like create the Jenkis jobs (dev|stage|prod)?',
                    default: ''
            });*/

            //Some optional questions
            if (this.hasOauth2) {
                prompts.push({
                    type: 'input',
                    name: 'oauth2Url',
                    message: 'Please put OAuth2 for DEV',
                    default: ''
                });
                prompts.push({
                    type: 'input',
                    name: 'clientId',
                    message: 'Please put OAuth2 client id for DEV',
                    default: ''
                });
                prompts.push({
                    type: 'input',
                    name: 'clientSecret',
                    message: 'Please put OAuth2 client secret for DEV',
                    default: ''
                });
            }
        }

        const done = this.async();
        
        if(this.hasConfigFile){
            this.props = this.jhipsterAeroAppConfig;
            done();
        }else{
            this.prompt(prompts).then((props) => {
                this.props = props;
                done();
            }); 
        }
    }

    writing() {
        // function to use directly template
        this.template = function (source, destination) {
            this.fs.copyTpl(
                this.templatePath(source),
                this.destinationPath(destination),
                this
            );
        };

        // read config from .yo-rc.json
        this.baseName = this.jhipsterAppConfig.baseName.toLowerCase();
        this.packageName = this.jhipsterAppConfig.packageName.toLowerCase();
        this.packageFolder = this.jhipsterAppConfig.packageFolder;
        this.clientFramework = this.jhipsterAppConfig.clientFramework;
        this.clientPackageManager = this.jhipsterAppConfig.clientPackageManager;
        this.buildTool = this.jhipsterAppConfig.buildTool;
        this.prodDatabaseType = this.jhipsterAppConfig.prodDatabaseType;
        this.jenkisJobs = this.jhipsterAppConfig.jenkisJobs;
        
        // use function in generator-base.js from generator-jhipster
        this.angularAppName = this.getAngularAppName();

        // use constants from generator-constants.js
        const javaDir = `${jhipsterConstants.SERVER_MAIN_SRC_DIR + this.packageFolder}/`;
        const resourceDir = jhipsterConstants.SERVER_MAIN_RES_DIR;
        const webappDir = jhipsterConstants.CLIENT_MAIN_SRC_DIR;

        //Variable from questions
        this.projectName = this.props.projectName;
        this.projectStackName = this.projectName.replace(/-/g, '_');
        this.businessArea = this.props.businessArea;
        this.gitBranch = this.props.gitBranch;
        this.gitCredentialsId = this.props.gitCredentialsId;
        this.registryUrl = this.props.registryUrl;
        this.dockerUrl = this.props.dockerUrl;
        this.vsDocker = this.props.vsDocker;
        this.version = this.props.version;
        this.graphiteUrl = this.props.graphiteUrl;
        this.oauth2Url = this.hasOauth2 ? this.props.oauth2Url : '';
        this.clientId = this.hasOauth2 ? this.props.clientId : '';
        this.clientSecret =  this.hasOauth2 ? this.props.clientSecret : '';    
        this.springCloudUrl = this.props.springCloudUrl;
        this.hasDatabase = this.prodDatabaseType == 'mysql' || this.prodDatabaseType == 'mssql';
    
        //Docker VS Stage
        this.vsDockerStage = this.vsDocker.replace('-dev1','-stage1');
        
        //Docker url Prod
        this.dockerUrlProd = this.props.dockerUrl.replace('-dev','');
        
        //Registry Stage / Prod
        this.registryUrlStage = this.registryUrl.replace('-dev','-stage');
        this.registryUrlProd = this.registryUrl.replace('-dev','');
        
        //Spring Cloud Stage / Prod
        this.springCloudUrlStage = this.springCloudUrl.replace('-dev','-stage');
        this.springCloudUrlProd = this.springCloudUrl.replace('-dev','');
        
        //Oauth2 Stage / Prod
        this.oauth2UrlStage = this.hasOauth2 ? this.props.oauth2Url.replace('-dev','-stage') : '';
        this.oauth2UrlProd = this.hasOauth2 ? this.props.oauth2Url.replace('-dev','') : '';
        

        // show all variables
        this.log('\n--- some config read from config ---');
        this.log(`baseName=${this.baseName}`);
        this.log(`packageName=${this.packageName}`);
        this.log(`clientFramework=${this.clientFramework}`);
        this.log(`clientPackageManager=${this.clientPackageManager}`);
        this.log(`buildTool=${this.buildTool}`);
        this.log(`authenticationType=${this.authenticationType}`);
        this.log(`hasOauth2=${this.hasOauth2}`);

        this.log('\n--- some const ---');
        this.log(`javaDir=${javaDir}`);
        this.log(`resourceDir=${resourceDir}`);
        this.log(`webappDir=${webappDir}`);

        this.log('\n--- variables from questions ---');
        this.log(`gitBranch=${this.gitBranch}`);
        this.log(`registryUrl=${this.registryUrl}`);
        this.log(`dockerUrl=${this.dockerUrl}`);
        this.log(`oauth2Url=${this.oauth2Url}`);
        this.log('------\n');
        
        this.log('\n--- variables from Dev / Stage / Prod ---');
        this.log(`registryUrlDev=${this.registryUrl}`);
        this.log(`registryUrlStage=${this.registryUrlStage}`);
        this.log(`registryUrlProd=${this.registryUrlProd}`);
        this.log(`dockerUrlDev=${this.dockerUrl}`);
        this.log(`dockerUrlStage=${this.dockerUrl}`);
        this.log(`dockerUrlProd=${this.dockerUrlProd}`);
        this.log(`oauth2UrlDev=${this.oauth2Url}`);
        this.log(`oauth2UrlStage=${this.oauth2UrlStage}`);
        this.log(`oauth2UrlProd=${this.oauth2UrlProd}`);
        this.log(`jenkisJobs=${this.jenkisJobs}`)
        this.log('------\n');
        
        //Path files
        var appNameFile = this.baseName.charAt(0).toUpperCase() + this.baseName.slice(1) + "App.java";
        var pathPom = `pom.xml`;
        var pathDockerIgnore = "src/main/docker/.dockerignore";
        var pathApplication = `${javaDir}`+ appNameFile;
        var pathConfigYml = `${resourceDir}/config/application.yml`;
        
        //Add deploy file
        this.template('deploy/_deploy', `${resourceDir}/deploy/deploy.sh`);

        //Add dockers configs
        this.template('docker/_dockerFile.txt', `src/main/docker/DockerFile`);
        this.template('docker/_app-int.yml', `src/main/docker/app-int.yml`);
        this.template('docker/_app-stage.yml', `src/main/docker/app-stage.yml`);
        this.template('docker/_app-prod.yml', `src/main/docker/app-prod.yml`);
        
        //Add LockConfiguration 
        this.template('config/_lock-configuration.java', `${javaDir}/config/LockConfiguration.java`);
        
        //Add ApplicationProperties 
        this.template('config/_application-properties.java', `${javaDir}/config/ApplicationProperties.java`);
        
        //Add CacheEvict 
        this.template('redis/_cache-manager-evict.java', `${javaDir}/config/evict/CacheManagerEvict.java`);
        this.template('redis/_evict-scheduler.java', `${javaDir}/config/evict/EvictScheduler.java`);
        
        //Add LogginAspect
        this.template('logging/_LoggingAspectProd.java', `${javaDir}/aop/logging/LoggingAspectProd.java`);
        this.template('logging/_LoggingAspectConfiguration.java', `${javaDir}/config/LoggingAspectConfiguration.java`);
        this.template('config/_Constants.java', `${javaDir}/config/Constants.java`);

        //Modify application.yml config root
        var propsGraphiteApp = this.fs.read(this.templatePath('config/_compose-props.yml'));
        this.fs.append(pathConfigYml,propsGraphiteApp);
        
        //Add redis props
        var configContent = this.fs.read(pathConfigYml);
        var springRedis = this.fs.read(this.templatePath('config/_redis-props.yml'));
        var newConfigContent = configContent.replace('spring:',springRedis)
                              .replace('<%=graphiteUrl%>',this.graphiteUrl)
                              .replace('<%=baseName%>',this.baseName);
        this.fs.write(pathConfigYml,newConfigContent);
        
        //Add application configs
        this.template('config/_application-int.yml', `${resourceDir}/config/application-int.yml`);
        this.template('config/_application-stage.yml', `${resourceDir}/config/application-stage.yml`);
        this.template('config/_application-prod.yml', `${resourceDir}/config/application-prod.yml`);
        this.template('config/_application-dev.yml', `${resourceDir}/config/application-dev.yml`);
        
        /*this.template('config/_bootstrap-int.yml', `${resourceDir}/config/bootstrap-int.yml`);
        this.template('config/_bootstrap-stage.yml', `${resourceDir}/config/bootstrap-stage.yml`);
        this.template('config/_bootstrap-prod.yml', `${resourceDir}/config/bootstrap-prod.yml`);*/

        //Add graphite classes
        this.template('graphite/_graphiteProperties.java', `${javaDir}/config/GraphiteProperties.java`);
        this.template('graphite/_graphiteRegistry.java', `${javaDir}/config/GraphiteRegistry.java`);
        
        //Update existing files
        var contentPom=this.fs.read(pathPom);
        var contentApp=this.fs.read(pathApplication);
        var newContentPom='';
        var newContentApp='';
        var contentDockerIgnore=this.fs.read(pathDockerIgnore);
        var newContentDockerIgnore='';
        
        //Application main
        var mainApp = this.fs.read(this.templatePath('app/_main.txt')).replace('<%=packageName%>',`${this.packageName}`);
        
        //Update application
        newContentApp = contentApp
            .replace('@EnableConfigurationProperties({LiquibaseProperties.class, ApplicationProperties.class})','@EnableConfigurationProperties({LiquibaseProperties.class, ApplicationProperties.class,GraphiteProperties.class})')
            .replace('@SpringBootApplication',mainApp);
        
        //Application file update
        this.fs.write(pathApplication,newContentApp);

        //Docker props
        var propsDocker = this.fs.read(this.templatePath('pom/_props.docker.xml'))
            .replace('<%=businessArea%>',`${this.businessArea}`)
            .replace('<%=dockerUrl%>',`${this.dockerUrl}`)
            .replace('<%=dockerUrlProd%>',`${this.dockerUrlProd}`);

        //Add props
        newContentPom=contentPom.replace('<!-- Build properties -->',propsDocker);
        
        //Dependencies
        var propsDependencies= this.fs.read(this.templatePath('pom/_props.dependencies.xml'));
        
        //Profiles props (int/stage/prod)
        var propsProfile = this.fs.read(this.templatePath('pom/_props.profiles.xml')).replace('${this.baseName}',`${this.baseName}`);
        
        //Add profiles / graphite / rename prod profile for overwrite it
        newContentPom = newContentPom
            .replace('<id>prod</id>','<id>prod_base</id>')
            .replace('</profiles>',propsProfile)
            .replace('<!-- jhipster-needle-maven-add-dependency -->',propsDependencies);
        
        //Comment testExecutionReportPaths
        newContentPom = newContentPom
            .replace('<sonar.testExecutionReportPaths>','<!--sonar.testExecutionReportPaths>')
            .replace('</sonar.testExecutionReportPaths>','</sonar.testExecutionReportPaths-->');
        
        //Pom file update
        this.fs.write(pathPom,newContentPom);
        
        //.dockerignore file update
        newContentDockerIgnore=contentDockerIgnore.replace('#classes','classes');
        this.fs.write(pathDockerIgnore,newContentDockerIgnore);
        
        //Add Jenkis pipelines
        this.template('jenkis/_jenkinsfile_int', `${resourceDir}/pipelines/jenkinsfile_int`);
        this.template('jenkis/_jenkinsfile_stage', `${resourceDir}/pipelines/jenkinsfile_stage`);
        this.template('jenkis/_jenkinsfile_prod', `${resourceDir}/pipelines/jenkinsfile_prod`); 
        
        //Add stack files
        this.template('stacks/_stack_int.pp', `${resourceDir}/stacks/stack_int.pp`);
        this.template('stacks/_stack_stage.pp', `${resourceDir}/stacks/stack_stage.pp`);
        this.template('stacks/_stack_prod.pp', `${resourceDir}/stacks/stack_prod.pp`);

    }

    install() {
        let logMsg =
            `To install your dependencies manually, run: ${chalk.yellow.bold(`${this.clientPackageManager} install`)}`;

        if (this.clientFramework === 'angular1') {
            logMsg =
                `To install your dependencies manually, run: ${chalk.yellow.bold(`${this.clientPackageManager} install & bower install`)}`;
        }
        const injectDependenciesAndConstants = (err) => {
            if (err) {
                this.warning('Install of dependencies failed!');
                this.log(logMsg);
            } else if (this.clientFramework === 'angular1') {
                this.spawnCommand('gulp', ['install']);
            }
        };
        const installConfig = {
            bower: this.clientFramework === 'angular1',
            npm: this.clientPackageManager !== 'yarn',
            yarn: this.clientPackageManager === 'yarn',
            callback: injectDependenciesAndConstants
        };
        if (this.options['skip-install']) {
            this.log(logMsg);
        } else {
            this.installDependencies(installConfig);
        }
    }

};
