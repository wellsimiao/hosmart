pipeline {
    agent any
    tools {
            maven 'maven-3.5.3' 
    	    jdk 'java-8-openjdk'
        }
    stages {
        stage("Compile") { 
            steps {
                sh "chmod a+x ./mvnw"
                sh "./mvnw -Pstage,graphite clean package -DskipTests=true"
            }
        }
       // stage("build & SonarQube analysis") {
       //     steps {
       //       withSonarQubeEnv('localhost') {
       //         sh 'mvn clean package sonar:sonar'
       //       }
       //     }
       // }
      //  stage("Quality Gate") {
      //      steps {
      //        timeout(time: 1, unit: 'HOURS') {
      //          waitForQualityGate abortPipeline: true
      //        }
      //      }
      //  }
        stage("Docker") {
            steps {
                sh "./mvnw verify dockerfile:build -Pstage -DskipTests=true"
                sh "./mvnw dockerfile:push -Ddockerfile.useMavenSettingsForAuth=true -Pstage -s /opt/apache/maven/3.5.3/conf/settings.xml"
            }
        }
        stage("Deploy") {
            steps {
                sh "./mvnw resources:resources -Pfilter-resources,stage"
                sh "mkdir -p <%=vsDockerStage%>:/opt/docker_compose/<%=projectName%>"
                sh "scp ./src/main/docker/app-stage.yml <%=vsDockerStage%>:/opt/docker_compose/<%=projectName%>"
                withCredentials([usernamePassword(credentialsId: 'auto-build_Registry-DEV', passwordVariable: 'password', usernameVariable: 'username')]) {
                //    sh "cat ./target/classes/deploy/deploy.sh $username $password"
                    sh "ssh vs-docker-stage1.ord.int.aeropost.com 'bash -s' <  ./target/classes/deploy/deploy.sh $username $password"
                }
            }
        }
    }
}