		<!-- Profile prod -->
		<profile>
			<id>prod</id>
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-undertow</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<version>${maven-clean-plugin.version}</version>
						<configuration>
							<filesets>
								<fileset>
									<directory>target/www/</directory>
								</fileset>
							</filesets>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>${maven-war-plugin.version}</version>
						<configuration>
							<failOnMissingWebXml>false</failOnMissingWebXml>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<version>${spring-boot.version}</version>
						<configuration>
							<mainClass>${start-class}</mainClass>
							<executable>true</executable>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>build-info</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>pl.project13.maven</groupId>
						<artifactId>git-commit-id-plugin</artifactId>
						<version>2.2.4</version>
						<executions>
							<execution>
								<goals>
									<goal>revision</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<failOnNoGitDirectory>false</failOnNoGitDirectory>
							<generateGitPropertiesFile>true</generateGitPropertiesFile>
							<includeOnlyProperties>
								<includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
								<includeOnlyProperty>^git.commit.id.describe$</includeOnlyProperty>
								<includeOnlyProperty>^git.branch$</includeOnlyProperty>
							</includeOnlyProperties>
						</configuration>
					</plugin>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>${dockerfile-maven-plugin.version}</version>
						<!-- Uncomment the section below to build the docker image with mvn 
							package and and push it with mvn deploy <executions> <execution> <id>default</id> 
							<goals> <goal>build</goal> <goal>push</goal> </goals> </execution> </executions> -->
						<configuration>
							<repository>${docker.repository.prod.url}/${docker.image.prefix}/${project.artifactId}</repository>
							<tag>${project.version}</tag>
							<buildArgs>
								<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
							</buildArgs>
							<env>
								<SPRING_PROFILES_ACTIVE>${enviroment}</SPRING_PROFILES_ACTIVE>
							</env>
							<contextDirectory>${project.build.directory}</contextDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<properties>
				<!-- default Spring profiles -->
				<spring.profiles.active>prod${profile.swagger}${profile.no-liquibase}</spring.profiles.active>
			</properties>
		</profile>
        <!-- Profile int -->
		<profile>
			<id>int</id>
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-undertow</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<version>${maven-clean-plugin.version}</version>
						<configuration>
							<filesets>
								<fileset>
									<directory>target/www/</directory>
								</fileset>
							</filesets>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>${maven-war-plugin.version}</version>
						<configuration>
							<failOnMissingWebXml>false</failOnMissingWebXml>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<version>${spring-boot.version}</version>
						<configuration>
							<mainClass>${start-class}</mainClass>
							<executable>true</executable>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>build-info</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>pl.project13.maven</groupId>
						<artifactId>git-commit-id-plugin</artifactId>
						<version>2.2.4</version>
						<executions>
							<execution>
								<goals>
									<goal>revision</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<failOnNoGitDirectory>false</failOnNoGitDirectory>
							<generateGitPropertiesFile>true</generateGitPropertiesFile>
							<includeOnlyProperties>
								<includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
								<includeOnlyProperty>^git.commit.id.describe$</includeOnlyProperty>
								<includeOnlyProperty>^git.branch$</includeOnlyProperty>
							</includeOnlyProperties>
						</configuration>
					</plugin>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>${dockerfile-maven-plugin.version}</version>
						<!-- Uncomment the section below to build the docker image with mvn 
							package and and push it with mvn deploy <executions> <execution> <id>default</id> 
							<goals> <goal>build</goal> <goal>push</goal> </goals> </execution> </executions> -->
						<configuration>
							<repository>${docker.repository.url}/${docker.image.prefix}/${project.artifactId}-${spring.profiles.active}</repository>
							<tag>${project.version}-${spring.profiles.active}</tag>
							<buildArgs>
								<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
							</buildArgs>
							<env>
								<SPRING_PROFILES_ACTIVE>${enviroment}</SPRING_PROFILES_ACTIVE>
							</env>
							<contextDirectory>${project.build.directory}</contextDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<properties>
				<!-- default Spring profiles -->
				<spring.profiles.active>int${profile.swagger}${profile.no-liquibase}</spring.profiles.active>
			</properties>
		</profile>
		<!-- Profile stage -->
		<profile>
			<id>stage</id>
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-undertow</artifactId>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<version>${maven-clean-plugin.version}</version>
						<configuration>
							<filesets>
								<fileset>
									<directory>target/www/</directory>
								</fileset>
							</filesets>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>${maven-war-plugin.version}</version>
						<configuration>
							<failOnMissingWebXml>false</failOnMissingWebXml>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<version>${spring-boot.version}</version>
						<configuration>
							<mainClass>${start-class}</mainClass>
							<executable>true</executable>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>build-info</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>pl.project13.maven</groupId>
						<artifactId>git-commit-id-plugin</artifactId>
						<version>2.2.4</version>
						<executions>
							<execution>
								<goals>
									<goal>revision</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<failOnNoGitDirectory>false</failOnNoGitDirectory>
							<generateGitPropertiesFile>true</generateGitPropertiesFile>
							<includeOnlyProperties>
								<includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
								<includeOnlyProperty>^git.commit.id.describe$</includeOnlyProperty>
								<includeOnlyProperty>^git.branch$</includeOnlyProperty>
							</includeOnlyProperties>
						</configuration>
					</plugin>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>${dockerfile-maven-plugin.version}</version>
						<!-- Uncomment the section below to build the docker image with mvn 
							package and and push it with mvn deploy <executions> <execution> <id>default</id> 
							<goals> <goal>build</goal> <goal>push</goal> </goals> </execution> </executions> -->
						<configuration>
							<repository>${docker.repository.url}/${docker.image.prefix}/${project.artifactId}-${spring.profiles.active}</repository>
							<tag>${project.version}-${spring.profiles.active}</tag>
							<buildArgs>
								<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
							</buildArgs>
							<env>
								<SPRING_PROFILES_ACTIVE>${enviroment}</SPRING_PROFILES_ACTIVE>
							</env>
							<contextDirectory>${project.build.directory}</contextDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<properties>
				<!-- default Spring profiles -->
				<spring.profiles.active>stage${profile.swagger}${profile.no-liquibase}</spring.profiles.active>
			</properties>
		</profile>
		<profile>
			<id>filter-resources</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>${maven-resources-plugin.version}</version>
					</plugin>
				</plugins>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<filtering>true</filtering>
						<includes>
							<include>deploy/*.sh</include>
						</includes>
					</resource>
				</resources>
			</build>
		</profile>
	</profiles>	