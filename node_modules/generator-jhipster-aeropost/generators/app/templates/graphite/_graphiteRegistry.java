package <%=packageName%>.config;

import java.net.InetSocketAddress;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Configuration;

import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.graphite.Graphite;
import com.codahale.metrics.graphite.GraphiteReporter;

@Configuration
@ConditionalOnProperty("graphite.enabled")
public class GraphiteRegistry {

	private final Logger log = LoggerFactory.getLogger(GraphiteRegistry.class);

	private final GraphiteProperties graphiteProperties;

	public GraphiteRegistry(MetricRegistry metricRegistry, GraphiteProperties graphiteProperties) {
		this.graphiteProperties = graphiteProperties;
		log.info("Initializing Metrics Graphite reporting");
		String graphiteHost = graphiteProperties.getHost();
		Integer graphitePort = graphiteProperties.getPort();
		String graphitePrefix = graphiteProperties.getPrefix();
		Graphite graphite = new Graphite(new InetSocketAddress(graphiteHost, graphitePort));
		GraphiteReporter graphiteReporter = GraphiteReporter.forRegistry(metricRegistry)
				.convertRatesTo(TimeUnit.SECONDS).convertDurationsTo(TimeUnit.MILLISECONDS)
				.prefixedWith(graphitePrefix).build(graphite);
		graphiteReporter.start(1, TimeUnit.MINUTES);
	}

}