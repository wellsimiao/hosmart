package <%=packageName%>.config;

import java.time.Duration;
import java.util.Arrays;
import java.util.Collection;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;

import io.github.jhipster.config.JHipsterConstants;
import net.javacrumbs.shedlock.core.LockProvider;
import net.javacrumbs.shedlock.provider.redis.spring.RedisLockProvider;
import net.javacrumbs.shedlock.spring.ScheduledLockConfiguration;
import net.javacrumbs.shedlock.spring.ScheduledLockConfigurationBuilder;

import org.springframework.data.redis.connection.RedisConnectionFactory;



@Configuration
public class LockConfiguration {
	
	private static final Logger log = LoggerFactory.getLogger(LockConfiguration.class);
	
	private Environment environment;
	
	public LockConfiguration(Environment environment)
	{
		this.environment = environment;
	}
	
	@Bean
	public ScheduledLockConfiguration taskScheduler(LockProvider lockProvider) {
	    return ScheduledLockConfigurationBuilder
	        .withLockProvider(lockProvider)
	        .withPoolSize(10)
	        .withDefaultLockAtMostFor(Duration.ofMinutes(10))
	        .build();
	}
	
	@Bean
	public LockProvider lockProvider(RedisConnectionFactory connectionFactory) {
		String env = "";
		Collection<String> activeProfiles = Arrays.asList(this.environment.getActiveProfiles());
		env = activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT) ? JHipsterConstants.SPRING_PROFILE_DEVELOPMENT :
			activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_PRODUCTION) ? JHipsterConstants.SPRING_PROFILE_PRODUCTION : "";
		
        log.info("You lockConfiguration it's running with environment " + env);
	    return new RedisLockProvider(connectionFactory, env);
	}

}