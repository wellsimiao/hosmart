# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
    level:
        ROOT: INFO
        io.github.jhipster: INFO
        com.aeropost.<%=baseName%>: INFO
        com.aeropost.<%=baseName%>.aop.logging.LoggingAspectProd: INFO
        
spring:
    output.ansi.enabled: always
    profiles:
        active: stage
        include: swagger
    devtools:
        restart:
            enabled: true
        livereload:
            enabled: false # we use Webpack dev server + BrowserSync for livereload
    jackson:
        serialization.indent_output: true
<% if (hasDatabase) { %> 
    datasource:
        maximum-pool-size: 2
        type: com.zaxxer.hikari.HikariDataSource
        url: <% if (prodDatabaseType == 'mysql') { %> jdbc:mysql://{HOST}/{DATABASE}?useUnicode=true&characterEncoding=utf8&useSSL=false <% } else { %> jdbc:jtds:sqlserver://{HOST}/{DATABASE}  <% } %> 
        username: {USER}
        password: {PWD}
        hikari:
            data-source-properties:
                cachePrepStmts: true
                prepStmtCacheSize: 250
                prepStmtCacheSqlLimit: 2048
                useServerPrepStmts: true
             
        jpa:
            database-platform: <% if (prodDatabaseType == 'mysql') { %> org.hibernate.dialect.MySQL5InnoDBDialect <% } else { %> org.hibernate.dialect.SQLServer2012Dialect  <% } %>   
            database: <% if (prodDatabaseType == 'mysql') { %> MYSQL <% } else { %> SQL_SERVER  <% } %>  
            show-sql: false
            properties:
                hibernate.id.new_generator_mappings: true
                hibernate.cache.use_second_level_cache: false
                hibernate.cache.use_query_cache: false
                hibernate.generate_statistics: false
<% } %>  

# ===================================================================
# To enable SSL, generate a certificate using:
# keytool -genkey -alias courierapi -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#    port: 443
#    ssl:
#        key-store: keystore.p12
#        key-store-password: <your-password>
#        key-store-type: PKCS12
#        key-alias: courierapi
#        # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#        ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
    ssl:
      enabled: false
    port: 8081
    compression:
        enabled: true
        mime-types: text/html,text/xml,text/plain,text/css, application/javascript, application/json
        min-response-size: 1024

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
    http:
        version: V_1_1 # To use HTTP/2 you will need SSL support (see above the "server.ssl" configuration)
        cache: # Used by the CachingHttpHeadersFilter
            timeToLiveInDays: 1461
    cache: # Cache configuration
        hazelcast: # Hazelcast distributed cache
            time-to-live-seconds: 3600
            backup-count: 1
            management-center: # Full reference is available at: http://docs.hazelcast.org/docs/management-center/3.9/manual/html/Deploying_and_Starting.html
                enabled: false
                update-interval: 3
                url:
    mail: # specific JHipster mail property, for standard properties see MailProperties
        from: courierapi@localhost
        base-url: http://my-server-url-to-change # Modify according to your server's URL
    metrics: # DropWizard Metrics configuration, used by MetricsConfiguration
        jmx:
            enabled: true
        logs: # Reports Dropwizard metrics in the logs
            enabled: false
            report-frequency: 60 # in seconds
    logging:
        logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
            enabled: false
            host: localhost
            port: 5000
            queue-size: 512        

# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:

# ===================================================================
# Compose Docker file overwrite.
# All props are overwritten by docker/app-{env} 
# ===================================================================        
eureka:
    instance:
        prefer-ip-address: overwrite-by-compose-docker-file
    client:
        service-url:
            defaultZone: overwrite-by-compose-docker-file  
<% if (hasOauth2) { %>
security:
   basic:
       enabled: false
   oauth2:
       client:
           access-token-uri: overwrite-by-compose-docker-file 
           user-authorization-uri: overwrite-by-compose-docker-file h
           client-id: overwrite-by-compose-docker-file 
           client-secret: overwrite-by-compose-docker-file 
           scope: overwrite-by-compose-docker-file 
       resource:
           user-info-uri: overwrite-by-compose-docker-file
<% } %>           
graphite:
        enabled: overwrite-by-compose-docker-file
        host: overwrite-by-compose-docker-file
        port: overwrite-by-compose-docker-file
        prefix: overwrite-by-compose-docker-file   
